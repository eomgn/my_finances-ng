{"ast":null,"code":"var _class;\nimport { HttpClient } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nexport class HttpBaseService {\n  constructor(injector) {\n    this.injector = injector;\n    this.apiBaseUrl = \"http://localhost:3000/\";\n    if (injector == null || injector === undefined) {\n      throw new Error(\"Injector não pode ser nulo\");\n    }\n    this.httpClient = injector.get(HttpClient);\n  }\n  httpGet(endpoint) {\n    return this.httpClient.get(`${this.apiBaseUrl}${endpoint}`);\n  }\n  httpPost(endpoint, payload) {\n    return this.httpClient.post(`${this.apiBaseUrl}${endpoint}`, payload);\n  }\n  httpPut(endpoint, payload) {\n    return this.httpClient.put(`${this.apiBaseUrl}${endpoint}`, payload);\n  }\n  httpDelete(endpoint) {\n    return this.httpClient.delete(`${this.apiBaseUrl}${endpoint}`);\n  }\n}\n_class = HttpBaseService;\n_class.ɵfac = function HttpBaseService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i0.Injector));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,sBAAsB;;AAOjD,OAAM,MAAOC,eAAe;EAK1BC,YAA+BC,QAAkB;IAAlB,aAAQ,GAARA,QAAQ;IAF/B,eAAU,GAAG,wBAAwB;IAG3C,IAAIA,QAAQ,IAAI,IAAI,IAAIA,QAAQ,KAAKC,SAAS,EAAE;MAC9C,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;;IAG/C,IAAI,CAACC,UAAU,GAAGH,QAAQ,CAACI,GAAG,CAACP,UAAU,CAAC;EAC5C;EAEUQ,OAAO,CAACC,QAAgB;IAChC,OAAO,IAAI,CAACH,UAAU,CAACC,GAAG,CAAC,GAAG,IAAI,CAACG,UAAU,GAAGD,QAAQ,EAAE,CAAC;EAC7D;EAEUE,QAAQ,CAACF,QAAgB,EAAEG,OAAY;IAC/C,OAAO,IAAI,CAACN,UAAU,CAACO,IAAI,CAAC,GAAG,IAAI,CAACH,UAAU,GAAGD,QAAQ,EAAE,EAAEG,OAAO,CAAC;EACvE;EAEUE,OAAO,CAACL,QAAgB,EAAEG,OAAY;IAC9C,OAAO,IAAI,CAACN,UAAU,CAACS,GAAG,CAAC,GAAG,IAAI,CAACL,UAAU,GAAGD,QAAQ,EAAE,EAAEG,OAAO,CAAC;EACtE;EAEUI,UAAU,CAACP,QAAgB;IACnC,OAAO,IAAI,CAACH,UAAU,CAACW,MAAM,CAAC,GAAG,IAAI,CAACP,UAAU,GAAGD,QAAQ,EAAE,CAAC;EAChE;;SA3BWR,eAAe;;mBAAfA,MAAe;AAAA;;SAAfA,MAAe;EAAAiB,SAAfjB,MAAe;EAAAkB,YAFd;AAAM","names":["HttpClient","HttpBaseService","constructor","injector","undefined","Error","httpClient","get","httpGet","endpoint","apiBaseUrl","httpPost","payload","post","httpPut","put","httpDelete","delete","factory","providedIn"],"sourceRoot":"","sources":["D:\\mgn\\minhas_financas\\src\\app\\shared\\base\\http-base.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Injectable, Injector } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class HttpBaseService {\n  private readonly httpClient!: HttpClient;\n\n  private apiBaseUrl = \"http://localhost:3000/\";\n\n  constructor(protected readonly injector: Injector) {\n    if (injector == null || injector === undefined) {\n      throw new Error(\"Injector não pode ser nulo\");\n    }\n\n    this.httpClient = injector.get(HttpClient);\n  }\n\n  protected httpGet(endpoint: string): Observable<any> {\n    return this.httpClient.get(`${this.apiBaseUrl}${endpoint}`);\n  }\n\n  protected httpPost(endpoint: string, payload: any): Observable<any> {\n    return this.httpClient.post(`${this.apiBaseUrl}${endpoint}`, payload);\n  }\n\n  protected httpPut(endpoint: string, payload: any): Observable<any> {\n    return this.httpClient.put(`${this.apiBaseUrl}${endpoint}`, payload);\n  }\n\n  protected httpDelete(endpoint: string): Observable<any> {\n    return this.httpClient.delete(`${this.apiBaseUrl}${endpoint}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}